package com.swv.oscar.service.batch.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.swv.oscar.dataobject.batch.Weo0neom;
import com.swv.oscar.dataobject.batch.Weo0neomBO;
import com.swv.oscar.dataobject.batch.Weo2nfyr;
import com.swv.oscar.dataobject.batch.Weo2nfyrBO;
import com.swv.oscar.exceptions.OscarBusinessException;
import com.swv.oscar.repositories.IWeo2nfyrRepository;
import com.swv.oscar.service.batch.IWeo0neomService;
import com.swv.oscar.service.batch.IWeo2nfyrService;
import com.swv.oscar.shared.set.AppConstants;
import com.swv.oscar.util.MappingHelper;
import com.swv.oscar.util.OscarLogger;

/*************************************************************************
 *
 * SWV CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * SWV is a trademark of SWV Company.
 *
 *Copyright © 2017 SWV. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of SWV
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SWV and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SWV.
 *
 *************************************************************************/
// Author : Generated by ATMA ®
// Revision History :
@Service
public class Weo2nfyrServiceImpl implements  IWeo2nfyrService {

    private static final OscarLogger LOGGER = OscarLogger.create(Weo2nfyrServiceImpl.class);

    @Autowired
    private IWeo2nfyrRepository weo2nfyrRepository;

    public void setWeo2nfyrRepository(IWeo2nfyrRepository weo2nfyrRepository) {
        this.weo2nfyrRepository = weo2nfyrRepository;
    }
    
    @Autowired
	private IWeo0neomService weo0neomService;
	
    public IWeo0neomService getWeo0neomService() {
		return weo0neomService;
	}
	public void setWeo0neomService(IWeo0neomService weo0neomService) {
		this.weo0neomService = weo0neomService;
	}

	String query = null;
    /**
     * Method execute
     * @param weo2nfyrBOReq
     * @return weo2nfyrBOResp
     * @throws OscarBusinessException
     */
    public Weo2nfyrBO execute(Weo2nfyrBO weo2nfyrBOReq) throws OscarBusinessException {
        LOGGER.debug(AppConstants.REQUEST+weo2nfyrBOReq);
        Weo2nfyrBO weo2nfyrBOResp = new Weo2nfyrBO();
        Weo0neomBO weo0neomBOResp = new Weo0neomBO();
        List<Weo2nfyr> weo2nfyrList = null;
        try {
            weo2nfyrList = new ArrayList<>();
            Weo2nfyr weo2nfyr = (Weo2nfyr) weo2nfyrBOReq.getFirst(weo2nfyrBOReq.getWeo2nfyr());
            //
            //  CHECKED OUT BY:
            //
            //
            //
            //  WEO2NFYR - DETERMINE FEDERAL FISCAL DATES (MONTHLY)
            //
            //  RETURN THE FEDERAL FISCAL YEAR (FFY) START DATE,
            //  RETURN THE FEDERAL FISCAL YEAR (FFY) END MONTH DATE,
            //  RETURN THE FEDERAL FISCAL YEAR
            //  RETURN THE PREVIOUS QUARTER BASED ON THE CURRENT PERIOD DATE.
            //  THE PREVIOUS QUARTER IS USED FOR MID-YEAR PROCESSING AND IS ONLY
            //  USED WHEN  #MTH-OR-QTR = Q
            //
            //  PREVIOUS QUARTER: 1-4 (4=OCT, 1=JAN, 2=APR, 3=JUL)
            //
            // LAST UPDATED    | BY        | REASON
            //
            // 09-25-2000       JOE PRYCE  INITIAL DEVELOPMENT;
            // 05-08-2011       GCAIN1     134207 CONVERT TO RUN MONTHLY
            //
            //
            //
            //
            //
            //
            //
            //
            //
            // SET-FISCAL-YEAR
            //
            //
            query = "select CURR_PRD_DATE from WEOVFIN_CONTROL";
            weo2nfyrBOResp = weo2nfyrRepository.executeQuery0(query);
			if(weo2nfyrBOResp.getWeo2nfyr() != null ){
				Weo2nfyr weo2nfyrLocal = (Weo2nfyr) weo2nfyrBOResp.getFirst(weo2nfyrBOResp.getWeo2nfyr());
				weo2nfyr.setTodaysDate(weo2nfyrLocal.getTodaysDate());
			}
			else{
				return weo2nfyrBOResp;
			}
            
			Weo0neom weo0neom = new Weo0neom();
			List<Weo0neom> weo0neomList = new ArrayList<>();
			weo0neomList.add(weo0neom);
			weo0neomBOResp.setWeo0neom(weo0neomList);
			weo0neomBOResp.getWeo0neom().get(0).setMonthOption("P");
			weo0neomBOResp.getWeo0neom().get(0).setDateIn(MappingHelper.getFormattedDate(weo2nfyr.getTodaysDate().trim(),"yyyy-MM-dd","yyyy.MM.dd"));
			weo0neomService.execute(weo0neomBOResp);
			weo2nfyr.setTodaysDate(weo0neomBOResp.getWeo0neom().get(0).getDateIn());
			weo2nfyr.setEomDate(weo0neomBOResp.getWeo0neom().get(0).getDateOut());
			weo2nfyr.setRc(weo0neomBOResp.getWeo0neom().get(0).getRc());
			
			//
			if(weo2nfyr.getEomDate() != null){
			weo2nfyr.setEomMm(weo2nfyr.getEomDate().trim().substring(5, 7));	
			weo2nfyr.setEomDd(weo2nfyr.getEomDate().trim().substring(8, 10));
            weo2nfyr.setFyeMm(weo2nfyr.getEomMm().trim());
            weo2nfyr.setFyeDd(weo2nfyr.getEomDd().trim());
			}
            
			
			weo2nfyr.setTodaysMmN(Integer.valueOf(weo2nfyr.getTodaysDate().trim().substring(5, 7)));
			weo2nfyr.setTodaysMm(weo2nfyr.getTodaysDate().trim().substring(5, 7));
            for(int i = 0 ; i < weo2nfyr.getMthQtrArray().length ; i++){
            if(weo2nfyr.getTodaysMmN() == (weo2nfyr.getMthQtrArray()[i])) {
                weo2nfyr.setMthOrQtr("Q");
                break;
            }else{
            	 weo2nfyr.setMthOrQtr("M");
            }
            }
            //
            if(weo2nfyr.getTodaysMm() != null){
            	weo2nfyr.setTodaysYyyy(weo2nfyr.getTodaysDate().trim().substring(0, 4));
            	weo2nfyr.setTodaysYyyyn(Integer.valueOf(weo2nfyr.getTodaysDate().trim().substring(0, 4)));
            switch (weo2nfyr.getTodaysMm()) {
            case "10":
                weo2nfyr.setFiscalYear(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFyeYyyy(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFysYyyy(String.valueOf(weo2nfyr.getTodaysYyyyn()-1));
                weo2nfyr.setFiscalQuarter(4);
               break;
            case "11":
            case "12":
                weo2nfyr.setFiscalYear(String.valueOf(weo2nfyr.getTodaysYyyyn() + 1));
                weo2nfyr.setFyeYyyy(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFysYyyy(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFiscalQuarter(1);
               break;
            case "01":
                weo2nfyr.setFiscalYear(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFyeYyyy(String.valueOf(weo2nfyr.getTodaysYyyyn()-1));
                weo2nfyr.setFysYyyy(String.valueOf(weo2nfyr.getTodaysYyyyn()-1));
                weo2nfyr.setFiscalQuarter(1);
               break;
            case "02":
            case "03":
                weo2nfyr.setFiscalYear(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFyeYyyy(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFysYyyy(String.valueOf(weo2nfyr.getTodaysYyyyn()-1));
                weo2nfyr.setFiscalQuarter(2);
               break;
            case "04":
                weo2nfyr.setFiscalYear(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFyeYyyy(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFysYyyy(String.valueOf(weo2nfyr.getTodaysYyyyn()-1));
                weo2nfyr.setFiscalQuarter(2);
               break;
            case "05":
            case "06":
                weo2nfyr.setFiscalYear(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFyeYyyy(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFysYyyy(String.valueOf(weo2nfyr.getTodaysYyyyn()-1));
                weo2nfyr.setFiscalQuarter(3);
               break;
            case "07":
                weo2nfyr.setFiscalYear(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFyeYyyy(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFysYyyy(String.valueOf(weo2nfyr.getTodaysYyyyn()-1));
                weo2nfyr.setFiscalQuarter(3);
               break;
            case "08":
            case "09":
                weo2nfyr.setFiscalYear(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFyeYyyy(weo2nfyr.getTodaysYyyy());
                weo2nfyr.setFysYyyy(String.valueOf(weo2nfyr.getTodaysYyyyn()-1));
                weo2nfyr.setFiscalQuarter(4);
                break;
             default:
            	 break;
            }
            }
            
            weo2nfyr.setFyStart(weo2nfyr.getFysYyyy().trim()+"-10-01");
            weo2nfyr.setFyEnd(weo2nfyr.getFyeYyyy().trim()+"-"+weo2nfyr.getFyeMm().trim()+"-"+weo2nfyr.getFyeDd().trim());
            
            weo2nfyr.setFfyStartDate(weo2nfyr.getFyStart());
            weo2nfyr.setFfyEndDate(weo2nfyr.getFyEnd());
            
            weo2nfyrList.add(weo2nfyr);
            weo2nfyrBOResp.setWeo2nfyr(weo2nfyrList);
            
            // End of list
        } catch (Exception ex) {
            LOGGER.error("Error:" + ex);
            throw new OscarBusinessException(ex);
        }
        LOGGER.debug("Response:"+weo2nfyrBOResp);
        return weo2nfyrBOResp;
    }
}