package com.swv.oscar.service.common.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.swv.oscar.dataobject.common.Weo0s002;
import com.swv.oscar.dataobject.common.Weo0s002BO;
import com.swv.oscar.exceptions.OscarBusinessException;
import com.swv.oscar.repositories.IWeo0s002Repository;
import com.swv.oscar.service.common.IWeo0s002Service;
import com.swv.oscar.shared.set.AppConstants;
import com.swv.oscar.util.NaturalUtil;
import com.swv.oscar.util.OscarLogger;

/*************************************************************************
 *
 * SWV CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * SWV is a trademark of SWV Company.
 *
 *Copyright © 2017 SWV. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of SWV
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SWV and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SWV.
 *
 *************************************************************************/
// Author : Generated by ATMA ®
// Revision History :
@Service
public class Weo0s002ServiceImpl implements  IWeo0s002Service {

    private static final OscarLogger LOGGER = OscarLogger.create(Weo0s002ServiceImpl.class);

    @Autowired
    private IWeo0s002Repository weo0s002Repository;

    public void setWeo0s002Repository(IWeo0s002Repository weo0s002Repository) {
        this.weo0s002Repository = weo0s002Repository;
    }

    String query = null;
    /**
     * Method execute
     * @param weo0s002BOReq
     * @return weo0s002BOResp
     * @throws OscarBusinessException
     */
    public Weo0s002BO execute(Weo0s002BO weo0s002BO) throws OscarBusinessException {
        LOGGER.debug(AppConstants.REQUEST+weo0s002BO);
        try {
            // SIGNED OUT BY:
            //
            //
            // WEO0S002
            //
            //  THIS SUBROUTINE DECIDES WHETHER THE USER HAS UPDATE ACCESS TO THE
            //  FUNCTION THAT HE/SHE IS GONNA WORK ON. 03/18/94
            //  LAST UPDATED ON 03/18/1994 ---- GIVING ACCESS TO "HELP" ROLE
            //
            // CHANGE HISTORY:
            // ----------------------------------------------------------------------
            //   DATE     | TECH    | REASON
            //
            //  12/06/94  | WE#0024 | CHANGE FOR 3 YEAR PURGE
            //  04/22/1999| JENKINS | ADDED SIGN OUT AT TOP
            //  09/20/2002| SHANNON | ADDED PROCESSING TO READ FROM CODES TABLE
            //            |         | WHICH ROLES CAN UPDATE CASES OUTSIDE THEIR
            //            |         | REGION AND ALLOW THE ACCESS
            //  10/07-2002| SHANNON | ADDED IF NOREC TO SELECT FROM VALID VALUES
            //
            // 09-20-02  PBS
        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarBusinessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BO);
        return weo0s002BO;
    }

    /**
     * Method checkUpdateAccess
     * @param weo0s002BOReq
     * @return weo0s002BOResp
     * @throws OscarBusinessException
     */
    public Weo0s002BO checkUpdateAccess(Weo0s002BO weo0s002BO) throws OscarBusinessException {
        LOGGER.debug(AppConstants.REQUEST+weo0s002BO);
        Weo0s002BO weo0s002BOResp = null;
        try {
            Weo0s002 weo0s002 = (Weo0s002) weo0s002BO.getFirst(weo0s002BO.getWeo0s002());

            weo0s002.setCaseIdReqd(null);
            weo0s002.setMode(null);
            weo0s002.setRegion(null);
            weo0s002.setwRegion(null);
            weo0s002.setgWorkerUid(NaturalUtil.getCurrentUser());
            weo0s002.setgUpdatable("N");
            query = "select panelTitle , caseIdReqdFlag  from weovpanelDesc where panelId = weo0s002.getgPanel()";
            weo0s002BOResp = weo0s002Repository.executeCheckUpdateAccessQuery0(query);
            weo0s002.setCaseIdReqd(weo0s002BOResp.getWeo0s002().get(0).getCaseIdReqd());
            if(weo0s002.getCaseIdReqd().equalsIgnoreCase("Y")) {
                getRegions(weo0s002BO);
                query = "select 'Y'  from weovvalidValues where result = weo0s002.getwRole() && tableNbr = \"212\"";
                weo0s002BOResp = weo0s002Repository.executeCheckUpdateAccessQuery1(query);
                if(weo0s002BOResp.getWeo0s002() != null && weo0s002BOResp.getWeo0s002().isEmpty()) {
                    // 10-07-2002  PBS
                    weo0s002.setUpdateableRole( "N");
                }
                if(weo0s002.getUpdateableRole().equalsIgnoreCase("N")) {
                    if(weo0s002.getwRegion().equalsIgnoreCase("32")) {
                        getSpluCaseload(weo0s002BO);
                        if(weo0s002.getSpluCaseload().equalsIgnoreCase(" ")) {
                            if((weo0s002.getRegion().equalsIgnoreCase(weo0s002.getwRegion())) || weo0s002.getgPanel().equalsIgnoreCase("RECO")) {
                                checkMode(weo0s002BO);
                            }
                        } else {
                            checkMode(weo0s002BO);
                        }
                    } else {
                        if((weo0s002.getRegion().equalsIgnoreCase(weo0s002.getwRegion())) || weo0s002.getgApplFlag().equalsIgnoreCase("Y") || 
                        weo0s002.getgPanel().equalsIgnoreCase("RECO")) {
                            checkMode(weo0s002BO);
                        }
                    }
                } else {
                    // 09-20-02  PBS
                    checkMode(weo0s002BO);
                }
                // 09-20-02  PBS
            } else {
                checkMode(weo0s002BO);
            }

            if(weo0s002.getMode().equalsIgnoreCase("U")) {
                weo0s002.setgUpdatable("Y");
            }
            //
            //  THIS IS A SPECIAL OVER RIDE FOR A WORKER WITH ROLE "HELP". HE/SHE
            //  CAN ACCESS ALL THE CASES BELONGING TO ALL REGIONS.. 03/18/94
            //
            if(weo0s002.getwRole().equalsIgnoreCase("HELP")) {
                weo0s002.setgUpdatable("Y");
            }

            /*TODO  centerMapTitle(weo0s002BOResp);*/
        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarBusinessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BO);
        return weo0s002BO;
    }

           /**
            * Method getRegions
            * @param weo0s002BOReq
            * @return weo0s002BOResp
            * @throws OscarBusinessException
            */
           public Weo0s002BO getRegions(Weo0s002BO weo0s002BO) throws OscarBusinessException {
        LOGGER.debug(AppConstants.REQUEST+weo0s002BO);
        Weo0s002BO weo0s002BOResp = null;
        try {

            //  READING  REGION OF A WORKER

            query = "select region , primaryRole  from weovworker where workerUid = weo0s002.getgWorkerUid()";
            weo0s002BOResp = weo0s002Repository.executeGetRegionsQuery2(query);
            weo0s002BO.getWeo0s002().get(0).setRegion(weo0s002BOResp.getWeo0s002().get(0).getRegion());
            query = "select region  from weovcaseload where caseloadId = weo0s002.getgCaseload()";
            weo0s002BOResp = weo0s002Repository.executeGetRegionsQuery3(query);
            weo0s002BO.getWeo0s002().get(0).setRegion(weo0s002BOResp.getWeo0s002().get(0).getRegion());

        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarBusinessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BO);
        return weo0s002BO;
    }

    /**
     * Method checkMode
     * @param weo0s002BOReq
     * @return weo0s002BOResp
     * @throws OscarBusinessException
     */
    public Weo0s002BO checkMode(Weo0s002BO weo0s002BO) throws OscarBusinessException {
        LOGGER.debug(AppConstants.REQUEST+weo0s002BO);
        Weo0s002BO weo0s002BOResp = null;
        try {

            query = "select mode  from weovpanelAssign where panelId = weo0s002.getgPanel() && roleId = weo0s002.getgRoleId()";
            weo0s002BOResp = weo0s002Repository.executeCheckModeQuery4(query);
            weo0s002BO.getWeo0s002().get(0).setMode(weo0s002BOResp.getWeo0s002().get(0).getMode());

        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarBusinessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BO);
        return weo0s002BO;
    }

    /**
     * Method getSpluCaseload
     * @param weo0s002BOReq
     * @return weo0s002BOResp
     * @throws OscarBusinessException
     */
    public Weo0s002BO getSpluCaseload(Weo0s002BO weo0s002BO) throws OscarBusinessException {
        LOGGER.debug(AppConstants.REQUEST+weo0s002BO);
        Weo0s002BO weo0s002BOResp = null;
        try {

            query = "select spluCaseloadId  from weovcase where caseId = weo0s002.getgCaseId()";
            weo0s002BOResp = weo0s002Repository.executeGetSpluCaseloadQuery5(query);
            weo0s002BO.getWeo0s002().get(0).setSpluCaseload(weo0s002BOResp.getWeo0s002().get(0).getSpluCaseload());

        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarBusinessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BO);
        return weo0s002BO;
    }
}