package com.swv.oscar.repositories.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;

import com.swv.oscar.dataobject.common.Weo0s002;
import com.swv.oscar.dataobject.common.Weo0s002BO;
import com.swv.oscar.exceptions.OscarDataAccessException;
import com.swv.oscar.repositories.IWeo0s002Repository;
import com.swv.oscar.shared.set.AppConstants;
import com.swv.oscar.util.OscarLogger;

/*************************************************************************
 *
 * SWV CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * SWV is a trademark of SWV Company.
 *
 * Copyright © 2017 SWV. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of SWV
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SWV and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SWV.
 *
 *************************************************************************/
// Author : Generated by ATMA ®
// Revision History :
@Repository
public class Weo0s002RepositoryImpl implements IWeo0s002Repository {

    private static final OscarLogger LOGGER = OscarLogger.create(Weo0s002RepositoryImpl.class);

    @PersistenceContext
    private EntityManager entityMgr;

    /*
      * Method executeCheckUpdateAccessQuery0
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeCheckUpdateAccessQuery0(String query) throws OscarDataAccessException {
        LOGGER.debug(AppConstants.REQUEST+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
        	TypedQuery<Object> typedQuery = (TypedQuery<Object>)entityMgr.createNativeQuery(query);
			List<Object>  entityList = typedQuery.getResultList();
            List<Weo0s002> bOList = new ArrayList<>();
    		if(entityList != null && !entityList.isEmpty()) {
    			for (int i = 0; i < entityList.size(); i++ ) {
    				Object[] prcSelect29 = (Object[]) entityList.get(i);
    				Weo0s002 weo0s002 = new Weo0s002();
    				weo0s002.setgPanel(prcSelect29[0].toString());
    				weo0s002.setCaseIdReqd(prcSelect29[0].toString());
    				bOList.add(weo0s002);
    			}
    			weo0s002BOResp.setWeo0s002(bOList);
    		}
        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeCheckUpdateAccessQuery1
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeCheckUpdateAccessQuery1(String query) throws OscarDataAccessException {
        LOGGER.debug(AppConstants.REQUEST+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
        	TypedQuery<Object> typedQuery = (TypedQuery<Object>)entityMgr.createNativeQuery(query);
			List<Object>  entityList = typedQuery.getResultList();
            List<Weo0s002> bOList = new ArrayList<>();
    		if(entityList != null && !entityList.isEmpty()) {
    			for (int i = 0; i < entityList.size(); i++ ) {
    				Object[] prcSelect29 = (Object[]) entityList.get(i);
    				Weo0s002 weo0s002 = new Weo0s002();
    				weo0s002.setUpdateableRole(prcSelect29[0].toString());
    				bOList.add(weo0s002);
    			}
    			weo0s002BOResp.setWeo0s002(bOList);
    		}
        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeGetRegionsQuery2
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeGetRegionsQuery2(String query) throws OscarDataAccessException {
        LOGGER.debug(AppConstants.REQUEST+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
        	TypedQuery<Object> typedQuery = (TypedQuery<Object>)entityMgr.createNativeQuery(query);
			List<Object>  entityList = typedQuery.getResultList();
            List<Weo0s002> bOList = new ArrayList<>();
    		if(entityList != null && !entityList.isEmpty()) {
    			for (int i = 0; i < entityList.size(); i++ ) {
    				Object[] prcSelect29 = (Object[]) entityList.get(i);
    				Weo0s002 weo0s002 = new Weo0s002();
    				weo0s002.setRegion(prcSelect29[0].toString());
    				weo0s002.setgRoleId(prcSelect29[0].toString());
    				bOList.add(weo0s002);
    			}
    			weo0s002BOResp.setWeo0s002(bOList);
    		}
        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeGetRegionsQuery3
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeGetRegionsQuery3(String query) throws OscarDataAccessException {
        LOGGER.debug(AppConstants.REQUEST+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
        	TypedQuery<Object> typedQuery = (TypedQuery<Object>)entityMgr.createNativeQuery(query);
			List<Object>  entityList = typedQuery.getResultList();
            List<Weo0s002> bOList = new ArrayList<>();
    		if(entityList != null && !entityList.isEmpty()) {
    			for (int i = 0; i < entityList.size(); i++ ) {
    				Object[] prcSelect29 = (Object[]) entityList.get(i);
    				Weo0s002 weo0s002 = new Weo0s002();
    				weo0s002.setRegion(prcSelect29[0].toString());
    				bOList.add(weo0s002);
    			}
    			weo0s002BOResp.setWeo0s002(bOList);
    		}
        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeCheckModeQuery4
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeCheckModeQuery4(String query) throws OscarDataAccessException {
        LOGGER.debug(AppConstants.REQUEST+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
        	TypedQuery<Object> typedQuery = (TypedQuery<Object>)entityMgr.createNativeQuery(query);
			List<Object>  entityList = typedQuery.getResultList();
            List<Weo0s002> bOList = new ArrayList<>();
    		if(entityList != null && !entityList.isEmpty()) {
    			for (int i = 0; i < entityList.size(); i++ ) {
    				Object[] prcSelect29 = (Object[]) entityList.get(i);
    				Weo0s002 weo0s002 = new Weo0s002();
    				weo0s002.setMode(prcSelect29[0].toString());
    				bOList.add(weo0s002);
    			}
    			weo0s002BOResp.setWeo0s002(bOList);
    		}
        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeGetSpluCaseloadQuery5
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeGetSpluCaseloadQuery5(String query) throws OscarDataAccessException {
        LOGGER.debug(AppConstants.REQUEST+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
        	TypedQuery<Object> typedQuery = (TypedQuery<Object>)entityMgr.createNativeQuery(query);
			List<Object>  entityList = typedQuery.getResultList();
            List<Weo0s002> bOList = new ArrayList<>();
    		if(entityList != null && !entityList.isEmpty()) {
    			for (int i = 0; i < entityList.size(); i++ ) {
    				Object[] prcSelect29 = (Object[]) entityList.get(i);
    				Weo0s002 weo0s002 = new Weo0s002();
    				weo0s002.setSpluCaseload(prcSelect29[0].toString());
    				bOList.add(weo0s002);
    			}
    			weo0s002BOResp.setWeo0s002(bOList);
    		}
        } catch (Exception ex) {
            LOGGER.error(AppConstants.ERROR + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug(AppConstants.RESPONSE+weo0s002BOResp);
        return weo0s002BOResp;
    }
}